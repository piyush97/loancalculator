{"version":3,"sources":["utils/API/endpoints.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","Header","Layout","Content","Footer","componentName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onAmountChange","event","value","setState","axios","get","concat","state","period","then","response","status","data","alert","catch","e","openNotification","message","_onMonthChange","notification","open","dataJ","react_default","a","createElement","layout","className","menu","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","padding","breadcrumb","margin","background","minHeight","row","col","span","divider","slider","min","max","onChange","card","title","width","interestRate","monthlyPayment","amount","currency","numPayments","principal","typography","textAlign","Component","App","Home_componentName","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a791d7eb.chunk.js","sourcesContent":["var baseURL;\nif (process.env.NODE_ENV === \"production\") {\n  baseURL = \"https://ftl-frontend-test.herokuapp.com\";\n} else {\n  baseURL = \"https://ftl-frontend-test.herokuapp.com\";\n}\nexport default baseURL;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  Divider,\n  Slider,\n  Row,\n  Col,\n  notification,\n  Typography,\n  Layout,\n  Menu,\n  Card,\n  Breadcrumb\n} from \"antd\";\n\nimport \"./Home.css\";\nimport baseURL from \"../utils/API/endpoints\";\nconst { Header, Content, Footer } = Layout;\n\nexport default class componentName extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 500,\n      period: 6,\n      data: null\n    };\n  }\n  _onAmountChange = (event, value) => {\n    this.setState({ value: event });\n    axios\n      .get(\n        `${baseURL}/interest?amount=${this.state.value}&numMonths=${\n          this.state.period\n        }`\n      )\n      .then(response => {\n        if (response.status === 200) this.setState({ data: response.data });\n        else alert(\"Connect to Internet please\");\n      })\n      .catch(e => {\n        this.openNotification(e.message);\n      });\n  };\n\n  _onMonthChange = (event, value) => {\n    axios\n      .get(\n        `${baseURL}/interest?amount=${this.state.value}&numMonths=${\n          this.state.period\n        }`\n      )\n      .then(response => {\n        if (response.status) this.setState({ data: response.data });\n        else alert(\"Connect to Internet please\");\n      })\n      .catch(e => {\n        this.openNotification(e.message);\n      });\n    this.setState({\n      period: event\n    });\n  };\n  openNotification = e => {\n    notification.open({\n      message: e\n    });\n  };\n  render() {\n    var dataJ = this.state.data;\n    return (\n      <div>\n        <Layout className=\"layout\">\n          <Header>\n            <div className=\"logo\" />\n            <Menu\n              theme=\"dark\"\n              mode=\"horizontal\"\n              defaultSelectedKeys={[\"1\"]}\n              style={{ lineHeight: \"64px\" }}\n            >\n              <Menu.Item key=\"1\">Loan Calculator</Menu.Item>\n            </Menu>\n          </Header>\n          <Content style={{ padding: \"0 50px\" }}>\n            <Breadcrumb style={{ margin: \"16px 0\" }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>Loan Calculator</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <div style={{ background: \"#fff\", padding: 34, minHeight: 720 }}>\n              <Row>\n                <Col span={8}>\n                  <Divider>Loan</Divider>\n                  <Slider\n                    min={500}\n                    max={5000}\n                    onChange={this._onAmountChange}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col span={8}>\n                  <Divider>Duration</Divider>{\" \"}\n                  <Slider min={6} max={24} onChange={this._onMonthChange} />\n                </Col>\n                {dataJ && (\n                  <Col span={12}>\n                    <center>\n                      <Row>\n                        <Card title=\"Interest Rate\" style={{ width: 300 }}>\n                          <p>{dataJ.interestRate}</p>\n                        </Card>\n                      </Row>\n                      <Row>\n                        <Card title=\"Monthly Payment\" style={{ width: 300 }}>\n                          <p>\n                            Amount: {dataJ.monthlyPayment.amount}{\" \"}\n                            {dataJ.monthlyPayment.currency}\n                          </p>\n                        </Card>\n                      </Row>\n                      <Row>\n                        <Card title=\"Number of Payments\" style={{ width: 300 }}>\n                          <p>Total Payments: {dataJ.numPayments} </p>\n                        </Card>\n                      </Row>\n                      <Row>\n                        <Card title=\"Principal\" style={{ width: 300 }}>\n                          <p>\n                            Principal Amount: {dataJ.principal.amount}{\" \"}\n                            {dataJ.principal.currency}\n                          </p>\n                        </Card>\n                      </Row>\n                    </center>\n                  </Col>\n                )}\n                {!dataJ && (\n                  <Typography>\n                    {\" \"}\n                    Please Select Duration and Amount first\n                  </Typography>\n                )}\n              </Row>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: \"center\" }}>Piyush Mehta Â©2019</Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}